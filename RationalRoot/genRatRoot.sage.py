

# This file was *autogenerated* from the file genRatRoot.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13 = Integer(13); _sage_const_20 = Integer(20); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)#---------------------------------------------------------------------
#the following parameters must be set-up before launching this script:
try:
    hi_prime
except NameError:
    hi_prime = _sage_const_13 

try:
    hi_cfs
except NameError:
    hi_cfs = _sage_const_20 

try:
    poly_num
except NameError:
    poly_num = _sage_const_20 


#---------------------------------------------------------------------

prime_lst = [pr for pr in primes(hi_prime+_sage_const_1 )] + [-pr for pr in primes(hi_prime+_sage_const_1 )]

poly_lst = []

while len(poly_lst) < poly_num:

    p, q = sample(prime_lst, _sage_const_2 )
    interv = [t for t in range(-hi_cfs+_sage_const_1 , hi_cfs)]
    interv.remove(_sage_const_0 )
    r = choice(interv)
    R = ZZ['x']; (x,) = R._first_ngens(1)
    f = (x-p)*(x**_sage_const_2 +r*x+q)
    cfs = f.list()
    maxc = max(max(cfs), min(cfs))
    cnt0 = cfs.count(_sage_const_0 )

    if not((r**_sage_const_2 -_sage_const_4 *q).is_square()) and (maxc < hi_cfs) and (cnt0 ==_sage_const_0 ):
        poly_lst.append((f, p))
        print(f, '=', factor(f))

