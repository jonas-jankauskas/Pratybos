

# This file was *autogenerated* from the file genTaylor.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_10 = Integer(10); _sage_const_1 = Integer(1); _sage_const_1000 = Integer(1000); _sage_const_10000 = Integer(10000); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
try:
    deg
except NameError:
    deg = _sage_const_4 

#maximal inital height
try:
    h_max
except NameError:
    h_max = _sage_const_5 

#maximal resulting height
try:
    c_max
except NameError:
    c_max = _sage_const_100 

#maximal shift
try:
    s_max
except NameError:
    s_max = _sage_const_10 

#maximal number of zero terms
try:
    z_max
except:
    z_max = _sage_const_1 

#maximal number of examples
try:
    pol_max
except:
    pol_max = _sage_const_1000 

#number of tries
try:
    num_tries
except:
    num_tries = _sage_const_10000 

#data file path
try:
    data_path
except NameError:
    data_path='../Data/'
    
#data file names
try:
    data_name
except NameError:
    data_name = 'taylor'

full_data_path=data_path+data_name

#load the earlier generated data
try:
    poly_data = load(full_data_path)
except:
    poly_data = []

shifts = [s for s in range(_sage_const_2 , s_max)]
shifts += [-s for s in shifts]
shifts.sort()

R = ZZ['t']; (t,) = R._first_ngens(1)
x=var('x')

for attempts in range(num_tries):
    f = R.random_element(deg, x=-h_max,y=h_max+_sage_const_1 )

    cfs = f.list()
    
    if (cfs[_sage_const_0 ] == _sage_const_0 ) or (cfs[-_sage_const_1 ] <= _sage_const_0 ):
        continue
        
    s = choice(shifts)
    g = f(t+s)

    cfs = g.list()
    if (cfs[_sage_const_0 ] == _sage_const_0 ):
        continue
    
    hf = f.norm(infinity)
    hg = g.norm(infinity)
    zf = f.list().count(_sage_const_0 )
    zg = g.list().count(_sage_const_0 )

    if (hf>h_max) or (hg>c_max) or (zf>z_max) or (zg>z_max):
        continue

    tp = (f, g, s)
    if tp not in poly_data:
        poly_data.append(tp)
        print('f(x)=', str(f(x)), '=', str(SR(f(x)).series(x==s,+oo)))

    if len(poly_data) >= pol_max:
        break

save(poly_data, full_data_path)

