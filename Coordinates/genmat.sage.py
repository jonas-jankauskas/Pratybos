

# This file was *autogenerated* from the file genmat.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_8 = Integer(8); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
import random as rnd
import itertools as itt

#---------------------------------------------------------------------
#the following parameters must be set-up before launching this script:

#number of rows and columns
try:
    ndim
except NameError:
    ndim = _sage_const_3 

#rank bounds
try:
    rg
except NameError:
    rg = _sage_const_3 

#largest matrix element
try:
    h_max
except NameError:
    h_max = _sage_const_8 

#bound for no. of zeros in row or column
try:
    z_max
except NameError:
    z_max = _sage_const_2 

#number of matrices
try:
    mat_num
except NameError:
    mat_num = _sage_const_20 

#---------------------------------------------------------------------

mat_lst = []
vec_lst = []
answ_lst = []

while len(mat_lst) < mat_num:

    mat = random_matrix(ZZ, ndim, ndim, rank=rg, algorithm='echelonizable', upper_bound=h_max)
    vec = random_vector(ZZ, ndim, x=_sage_const_0 , y=h_max)
    
    cnt0mat = max([r.list().count(_sage_const_0 ) for r in mat.rows()]+[c.list().count(_sage_const_0 ) for c in mat.columns()])
    cnt1mat = list(mat.columns()[_sage_const_0 ]).count(_sage_const_1 )+list(mat.columns()[_sage_const_0 ]).count(-_sage_const_1 )
    
    inv_mat = mat.inverse()
    answ = inv_mat*vec
    
    cnt0vec = vec.list().count(_sage_const_0 )
    cnt0ans = vec.list().count(_sage_const_0 )

    if (mat not in mat_lst) and (cnt0mat < z_max) and (cnt1mat > _sage_const_0 ) and (inv_mat.height() < h_max) and (answ.norm(infinity) < h_max) and  (cnt0vec == _sage_const_0 ) and (cnt0ans < z_max):
        mat_lst.append(mat)
        vec_lst.append(vec)
        answ_lst.append(answ)
        print(mat, '\n')
        print(inv_mat, '\n')
        print(vec)
        print(answ)
        print('-------------\n')

