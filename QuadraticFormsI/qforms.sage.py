

# This file was *autogenerated* from the file qforms.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_11 = Integer(11); _sage_const_88 = Integer(88); _sage_const_256 = Integer(256); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_54 = Integer(54); _sage_const_158 = Integer(158); _sage_const_48 = Integer(48); _sage_const_173 = Integer(173); _sage_const_8 = Integer(8); _sage_const_12 = Integer(12); _sage_const_31 = Integer(31); _sage_const_3 = Integer(3)
strip_dict = {'{':'', '}': '', '_': '', ' ': '',  '*': ''}
space_dict = {'=': ' = ', '+': ' + ', '-': ' - '}

def trans(s, tab):
    t = str(s)
    for c in tab.keys():
        t = t.replace(c, tab[c])
    return t

def reformat(s):
    return trans(trans(s, strip_dict), space_dict)


formlist = {
'a)': [_sage_const_1 , -_sage_const_4 , -_sage_const_2 , _sage_const_11 , _sage_const_88 , _sage_const_256 ],
'b)': [-_sage_const_1 , _sage_const_2 , _sage_const_6 , -_sage_const_5 , -_sage_const_54 , -_sage_const_158 ],
'c)': [_sage_const_1 , -_sage_const_4 , _sage_const_6 , -_sage_const_1 , _sage_const_48 , -_sage_const_173 ],
'd)': [_sage_const_1 , _sage_const_2 , _sage_const_8 , -_sage_const_1 , -_sage_const_12 , -_sage_const_31 ]
}

for vr in formlist.keys():
    print('#--------------------------------------------------------#')
    print('#                       3 u≈æd. '+vr+'                        #')
    print('#--------------------------------------------------------#')

    qf = QuadraticForm(QQ, _sage_const_3 , formlist[vr])
    fm  = qf.matrix()/_sage_const_2 
    fp = qf.polynomial('x1,x2,x3')
    print(fp)
    nf, T = qf.rational_diagonal_form(return_matrix=True)
    D = nf.matrix()/_sage_const_2 
    C = T.transpose() 

    print('D=\n'+str(D))
    print('C=\n'+str(C))
    print('C^(-1)=\n'+str(C.inverse()))
    print('C*A*C^t=\n'+str(C*fm*(C.transpose())))

    np = nf.polynomial('y1,y2,y3')
    print(reformat(str(np)))

    R = PolynomialRing(QQ, _sage_const_6 , names='x1,x2,x3,y1,y2,y3')
    X = vector(R, _sage_const_3 , R.gens()[:_sage_const_3 ])
    Y = vector(R, _sage_const_3 , R.gens()[_sage_const_3 :])

    latex_eqs = [str(latex(X[i])+'='+latex((Y*C)[i])) for i in range(len(X))]

    dic1 = {'{':'', '}': '', '_': '', ' ': ''}
    dic2 = {'=': ' = ', '+': ' + ', '-': ' - '}
    
    for eq in latex_eqs:
        print(reformat(eq))

