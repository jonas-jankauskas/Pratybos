

# This file was *autogenerated* from the file genmat.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import random as rnd
import itertools as itt

#---------------------------------------------------------------------
#the following parameters must be set-up before launching this script:

#number of rows and columns
try:
    num_rows
except NameError:
    num_rows = _sage_const_4 
try:
    num_cols
except NameError:
    num_cols = _sage_const_4 

#rank bounds
try:
    rg_min
except NameError:
    rg_min = _sage_const_2 

try:
    rg_max
except NameError:
    rg_max = _sage_const_2 

#largest matrix element
try:
    h_max
except NameError:
    h_max = _sage_const_8 

#bound for no. of zeros in row or column
try:
    z_max
except NameError:
    z_max = _sage_const_2 

#number of matrices
try:
    mat_num
except NameError:
    mat_num = _sage_const_1 
#---------------------------------------------------------------------
#report colinear rows and columns
def colinear(u, v):
    A = matrix(ZZ, [u, v])
    if A.rank() == _sage_const_2 :
        return _sage_const_0 
    else:
        return _sage_const_1 
                
def check_mat(M):
    return (sum(colinear(u, v) for u, v in itt.combinations(M.rows(),_sage_const_2 )), sum(colinear(u, v) for u, v in itt.combinations(M.columns(),_sage_const_2 )))

#---------------------------------------------------------------------

mat_lst = []
while len(mat_lst) < mat_num:
    rg = rnd.randint(rg_min, rg_max)
    mat = random_matrix(ZZ, num_rows, num_cols, rank=rg, algorithm='echelonizable', upper_bound=h_max)
    cnt0 = max([r.list().count(_sage_const_0 ) for r in mat.rows()]+[c.list().count(_sage_const_0 ) for c in mat.columns()])
    cnt1 = list(mat.columns()[_sage_const_0 ]).count(_sage_const_1 )+list(mat.columns()[_sage_const_0 ]).count(-_sage_const_1 )
    crows, ccols = check_mat(mat)
    red = mat.echelon_form()
    if (mat not in mat_lst) and (cnt0 < z_max) and (cnt1 > _sage_const_0 ) and (red.height() < h_max) and (crows+ccols ==_sage_const_0 ):
        mat_lst.append(mat)
        print(mat)
        print('rank =', mat.rank())

